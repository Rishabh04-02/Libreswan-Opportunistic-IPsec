#!/bin/bash

# This script needs to be run as root
echo "Checking if the script is run as root."
if [[ $EUID -ne 0 ]]; 
then
  echo -e "This script should be run as root. \n"
  exit 
else
  echo -e "This script is run as root. Good to go. \n"
fi

#Installing for client or server?
read -p "Installing for server or client? Type (S/C) " answer


# Checking if IPsec is installed
echo "Checking if IPsec is installed"
ipdir="/etc/ipsec.d"
if [ ! -d "$ipdir" ] 
then
	echo "Directory /etc/ipsec.d DOES NOT exists. Please install IPsec (https://libreswan.org)"
  echo "For Fedora - dnf -y install libreswan-3.*"
  echo "For Centos - yum -y install libreswan-3.*"
  echo "For Ubuntu - apt-get -y install libreswan"
  exit
else
	echo -e "IPsec is installed. \n"
fi


# Downloading the letsencrypt certificates
echo "Downloading the letsencrypt certificates"
DIR1="certs/CA"
# CA certificates
CERT1="https://letsencrypt.org/certs/isrgrootx1.pem.txt"
CERT2="https://letsencrypt.org/certs/trustid-x3-root.pem.txt"

DIR2="certs/intermediate"
# Intermediate certificates
CERT3="https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem.txt"
CERT4="https://letsencrypt.org/certs/letsencryptauthorityx3.pem.txt"

# Deleting the certs directory (if previously present)
echo "Deleting the certs directories $DIR1 , $DIR2 (if previously present)"

rm -rf "$DIR1"
rm -rf "$DIR2"

# Downloading the CA certificates
wget_output=$(wget -q -P "$DIR1" "$CERT1" "$CERT2")
if [ $? -ne 0 ]; 
then
	echo "Certificates NOT Found OR Saving the certificates in directory failed"
  echo "try running the script with 'sudo' (root privileges)"
  exit 
else
	echo "CA Certificates downloaded."
fi

# Downloading the Intermediate certificates
wget_output=$(wget -q -P "$DIR2" "$CERT3" "$CERT4")
if [ $? -ne 0 ]; 
then
	echo "Certificates NOT Found OR Saving the certificates in directory failed"
  echo "try running the script with 'sudo' (root privileges)"
  exit 
else
	echo -e "Intermediate Certificates downloaded. \n"
fi


# Initializing the nss database
echo "Initializing the nss database"
ipsec initnss
echo

# Importing the CA certificates
echo "Importing the downloaded certificates into NSS Database"
for file in certs/CA/*; do
  file=${file##*/}
  # Removing the file extension (.pem.txt) from certificates
  name=${file%.pem.txt}
  certutil -A -d sql:/etc/ipsec.d -n "$name" -i certs/CA/"$file" -t "CT,,"
done
echo "CA certificates Imported successfully."

# Importing the Intermediate certificates
for file in certs/intermediate/*; do
  file=${file##*/}
  # Removing the file extension (.pem.txt) from certificates
  name=${file%.pem.txt}
  certutil -A -d sql:/etc/ipsec.d -n "$name" -i certs/intermediate/"$file" -t "u,u,u"
done
echo -e "Intermediate certificates Imported successfully. \n"


#Copying the required configuration
if [ "$answer" = "s" ] || [ "$answer" = "S" ];
then
  configFile="config/oe-letsencrypt-server.conf"
else
  configFile="config/oe-letsencrypt-client.conf"
fi

cp "$configFile" "$ipdir"

echo "Saving the required configuration"
echo -e "$configFile configuration saved in $ipdir \n"


#Restarting Ipsec
echo -e "Restarting Ipsec \n"
ipsec restart


#Establishing an OE connection
echo -e "Establishing an OE connection. \n"
if [ "$answer" = "c" ] || [ "$answer" = "C" ];
then
  #Get the IP of server
  getIP=$(curl ifconfig.me)
  
  #Establish an OE connection
  ##Take server IP as user input (once the initial testing completes)
  ipsec whack --oppohere "$getIP" --oppothere 193.110.157.131
fi


#Checking the success of establishing OE connection
echo -e "\nChecking the success of establishing OE connection \n"
oeSuccess=$(ipsec traffic)
if [ -z "$oeSuccess" ]; 
then
  echo -e "Failed to establish an OE connection. \n"
  exit
else
  echo -e "OE Connection established successfully \n"
  #Displaying connection status
  echo -e "Displaying connection status \n"
  ipsec traffic
fi
