#!/bin/bash

# This script needs to be run as root
echo "Checking if the script is run as root."
if [[ $EUID -ne 0 ]]; then
    echo -e "This script should be run as root. \n"
    exit
else
    echo -e "This script is run as root. Good to go. \n"
fi

# Installing for client or server?
read -p "Installing for server or client? Type (sS/cC): " answer

# Checking if IPsec is installed
echo "Checking if IPsec is installed"
ipdir="/etc/ipsec.d"
if [ ! -d "$ipdir" ]; then
    echo "Directory /etc/ipsec.d DOES NOT exists. Please install IPsec (https://libreswan.org)"
    echo "For Fedora - dnf -y install libreswan-3.*"
    echo "For Centos - yum -y install libreswan-3.*"
    echo "For Ubuntu - apt-get -y install libreswan"
    exit
else
    echo -e "IPsec is installed. \n"
fi

# Checking for any existing OE connections
echo -e "Checking for any existing OE connections"
oeExisting=$(ipsec traffic)
if [ -z "$oeExisting" ]; then
    echo "No existing OE connections found. Good to go."
else
    echo "Existing OE Connections Found. Stopping the connections."
    # Stopping the existing OE connections
    ipsec restart
fi

# Downloading the letsencrypt certificates
echo -e "\nDownloading the letsencrypt certificates"
DIR1=$(mktemp -d)
# CA certificates
CERT1="https://letsencrypt.org/certs/isrgrootx1.pem.txt"
CERT2="https://letsencrypt.org/certs/trustid-x3-root.pem.txt"

DIR2=$(mktemp -d)
# Intermediate certificates
CERT3="https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem.txt"
CERT4="https://letsencrypt.org/certs/letsencryptauthorityx3.pem.txt"

# Downloading the CA certificates
wget_output=$(wget -q -P "$DIR1" "$CERT1" "$CERT2")
if [ $? -ne 0 ]; then
    echo "Certificates NOT Found OR Saving the certificates in directory failed"
    exit
else
    echo "CA Certificates downloaded in $DIR1"
fi

# Downloading the Intermediate certificates
wget_output=$(wget -q -P "$DIR2" "$CERT3" "$CERT4")
if [ $? -ne 0 ]; then
    echo "Certificates NOT Found OR Saving the certificates in directory failed"
    exit
else
    echo -e "Intermediate Certificates downloaded in $DIR2 \n"
fi

# Checking if nss database exists
echo "Checking if nss database exists"
dbFileCount=$(ls "$ipdir"/*.db 2>/dev/null | wc -l)
if [ $dbFileCount != 0 ]; then
    echo -e "nss database exists. \n"
else
    # Initializing the nss database
    echo "nss database does not exist. Initializing the nss database"
    ipsec initnss
fi

# Importing the CA certificates
echo "Importing the downloaded certificates into NSS Database"
for file in "$DIR1"/*; do
    file=${file##*/}
    # Removing the file extension (.pem.txt) from certificates
    name=${file%.pem.txt}
    certutil -A -d sql:/etc/ipsec.d -n "$name" -i "$DIR1"/"$file" -t "CT,,"
done
echo "CA certificates Imported successfully."

# Importing the Intermediate certificates
for file in "$DIR2"/*; do
    file=${file##*/}
    # Removing the file extension (.pem.txt) from certificates
    name=${file%.pem.txt}
    certutil -A -d sql:/etc/ipsec.d -n "$name" -i "$DIR2"/"$file" -t "u,u,u"
done
echo -e "Intermediate certificates Imported successfully. \n"

# Copying the required configuration
if [ "$answer" = "s" ] || [ "$answer" = "S" ]; then
    configFile="config/oe-letsencrypt-server.conf"
    configFileName="oe-letsencrypt-server.conf"
else
    configFile="config/oe-letsencrypt-client.conf"
    configFileName="oe-letsencrypt-client.conf"
fi

cp "$configFile" "$ipdir"

echo "Saving the required configuration"
echo "$configFileName configuration saved in $ipdir"
echo -e "restoring the security context of $ipdir/$configFileName using restorecon. \n"
restorecon "$ipdir"/"$configFileName"

# Restarting Ipsec
echo -e "Restarting Ipsec \n"
ipsec restart

# Establishing an OE connection
echo -e "Establishing an OE connection. \n"
if [ "$answer" = "c" ] || [ "$answer" = "C" ]; then
    # Get the IP of client
    getIP=$(curl ifconfig.me)
    # Establish an OE connection in quiet mode
    ## Take server IP as user input (once the initial testing completes)
    ipsec whack --oppohere "$getIP" --oppothere 193.110.157.131 >/dev/null
fi

# Sending pings to the letsencrypt server
echo -e "Sending ping(IPv4) to the letsencrypt.libreswan.org server. \n"
ping -4 -c 5 letsencrypt.libreswan.org

# Checking the success of establishing OE connection
echo -e "\nChecking the success of establishing OE connection \n"
oeSuccess=$(ipsec traffic)
if [ -z "$oeSuccess" ]; then
    echo -e "Failed to establish an OE connection. (Ignore this message if you installed for server. As it checks the ipsec traffic.) \n"
    exit
else
    echo -e "OE Connection established successfully \n"
    # Displaying connection status
    echo -e "Displaying connection status \n"
    ipsec traffic
fi
