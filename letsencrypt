#!/bin/bash

FileName=$(basename $0)

# ipdir variable for getting location to save the configuration files
ipdir="/etc/ipsec.d"

# function for checking if the command is run as root
check_root() {
    # This command needs to be run as root
    echo "Checking if the command is run as root."
    if [[ $EUID -ne 0 ]]; then
        echo -e "This command should be run as root. \n"
        exit
    else
        echo -e "This command is run as root. Good to go. \n"
    fi
}

# function for testing OE connection
test() {
    # Checking for any existing OE connections
    echo -e "Checking for any existing OE connections"
    oeExisting=$(ipsec traffic | grep private)
    if [ -z "$oeExisting" ]; then
        echo -e "No existing OE connections found. Good to go.\n"
    else
        echo "Existing OE Connections Found. Stopping the connections."
        # Stopping the existing OE connections
        ipsec restart
        sleep 3
    fi

    # Establishing an OE connection and sending pings to letsencrypt.libreswan.org server
    echo -e "Sending ping(IPv4) to letsencrypt.libreswan.org server. \n"
    ping -4 -c 5 letsencrypt.libreswan.org

    # Checking the success of establishing OE connection
    echo -e "\nChecking the success of establishing OE connection \n"
    oeSuccess=$(ipsec traffic | grep private)
    if [ -z "$oeSuccess" ]; then
        echo -e "Failed to establish an OE connection. (Ignore this message if you installed for server. As it checks the ipsec traffic.) \n"
        exit
    else
        echo -e "OE Connection established successfully \n"
        # Displaying connection status
        echo -e "Displaying connection status \n"
        ipsec traffic | grep private
    fi
}

# Function for performaing Initial setup
setup() {
    # Installing for client or server?
    read -p "Installing for server or client? Type (sS/cC): " answer

    # Checking for any existing OE connections
    echo -e "Checking for any existing OE connections"
    oeExisting=$(ipsec traffic | grep private)
    if [ -z "$oeExisting" ]; then
        echo "No existing OE connections found. Good to go."
    else
        echo "Existing OE Connections Found. Stopping the connections."
        # Stopping the existing OE connections
        ipsec restart
        sleep 3
    fi

    # Downloading the letsencrypt certificates
    echo -e "\nDownloading the letsencrypt certificates"
    DIR1=$(mktemp -d)
    # CA certificates
    CERT1="https://letsencrypt.org/certs/isrgrootx1.pem.txt"
    CERT2="https://letsencrypt.org/certs/trustid-x3-root.pem.txt"

    DIR2=$(mktemp -d)
    # Intermediate certificates
    CERT3="https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem.txt"
    CERT4="https://letsencrypt.org/certs/letsencryptauthorityx3.pem.txt"

    # Downloading the CA certificates
    wget_output=$(wget -q -P "$DIR1" "$CERT1" "$CERT2")
    if [ $? -ne 0 ]; then
        echo "Certificates NOT Found OR Saving the certificates in directory failed"
        exit
    else
        echo "CA Certificates downloaded in $DIR1"
    fi

    # Downloading the Intermediate certificates
    wget_output=$(wget -q -P "$DIR2" "$CERT3" "$CERT4")
    if [ $? -ne 0 ]; then
        echo "Certificates NOT Found OR Saving the certificates in directory failed"
        exit
    else
        echo -e "Intermediate Certificates downloaded in $DIR2. \n"
    fi

    # Checking if nss database exists
    dbFileCount=$(ls "$ipdir"/*.db 2>/dev/null | wc -l)
    if [ $dbFileCount -eq 0 ]; then
        # NSS database does not exist. Initializing the nss database
        ipsec initnss
    fi

    # Importing the CA certificates in NSS database
    echo "Importing the downloaded certificates into the database"
    for file in "$DIR1"/*; do
        file=${file##*/}
        # Removing the file extension (.pem.txt) from certificates
        name=${file%.pem.txt}
        certutil -A -d sql:/etc/ipsec.d -n "$name" -i "$DIR1"/"$file" -t "CT,,"
    done
    echo "CA certificates Imported successfully."

    # Importing the Intermediate certificates in NSS database
    for file in "$DIR2"/*; do
        file=${file##*/}
        # Removing the file extension (.pem.txt) from certificates
        name=${file%.pem.txt}
        certutil -A -d sql:/etc/ipsec.d -n "$name" -i "$DIR2"/"$file" -t "u,u,u"
    done
    echo -e "Intermediate certificates Imported successfully. \n"

    # Copying the required configuration
    if [ "$answer" = "s" ] || [ "$answer" = "S" ]; then
        configFile="/usr/share/doc/libreswan/examples/oe-letsencrypt-server.conf"
        configFileName="oe-letsencrypt-server.conf"
    else
        configFile="/usr/share/doc/libreswan/examples/oe-letsencrypt-client.conf"
        configFileName="oe-letsencrypt-client.conf"
    fi

    cp "$configFile" "$ipdir"

    echo "Saving the required configuration"
    echo "$configFileName configuration saved in $ipdir"
    echo -e "restoring the security context of $ipdir/$configFileName using restorecon. \n"
    restorecon "$ipdir"/"$configFileName"

    # Restarting Ipsec
    echo -e "Restarting Ipsec \n"
    ipsec restart
    sleep 3

    # Establishing an OE connection for clients
    if [ "$answer" = "c" ] || [ "$answer" = "C" ]; then
        echo -e "Establishing an OE connection. \n"
        # Establishing an OE connection and sendipsec restarting pings to the letsencrypt server
        echo -e "Sending ping(IPv4) to the letsencrypt.libreswan.org server. \n"
        ping -4 -c 5 letsencrypt.libreswan.org

        # Checking the success of establishing OE connection
        echo -e "\nChecking the success of establishing OE connection \n"
        oeSuccess=$(ipsec traffic | grep private)
        if [ -z "$oeSuccess" ]; then
            echo -e "Failed to establish an OE connection. (Ignore this message if you installed for server. As it checks for private connections in the ipsec traffic.) \n"
            exit
        else
            echo -e "OE Connection established successfully \n"
            # Displaying connection status
            echo -e "Displaying connection status \n"
            ipsec traffic | grep private
        fi
    fi
}

# function for generating a certificates
generate_certificate() {
    # Generating the certificate using Certbot
    echo -e "Checking if Certbot is installed. \n"
    certBotInstalled=$(command -v certbot)
    if [ -z "$certBotInstalled" ]; then
        echo -e "Certbot not installed. \n"
        exit
    else
        echo -e "Certbot is installed, Good to go. \n"
    fi

    echo -e "Generating the certificate using Certbot. \n"
    sudo certbot certonly --webroot

    # Preparing the certificate for importing in the nss database
    echo -e "Preparing the certificate for importing in the nss database."

    # Generating #pkcs12 file
    echo -e "Generating the #pkcs12 (.p12) file."
    echo -e "Downloading the required Intermediate certificate."

    # Downloading the required Intermediate certificate
    DIR=$(mktemp -d)
    CERT="https://letsencrypt.org/certs/letsencryptauthorityx3.pem.txt"

    wget_output=$(wget -q -P "$DIR" "$CERT")
    if [ $? -ne 0 ]; then
        echo "Certificates NOT Found OR Saving the certificate in directory failed"
        exit
    else
        echo -e "Intermediate Certificate downloaded in $DIR \n"
    fi

    # Renaming the certificates
    echo -e "Renaming the certificate."
    for file in "$DIR"/*; do
        file=${file##*/}
        # Removing the file extension (.txt) from certificates
        name=${file%.txt}
        mv "$DIR"/"$file" "$DIR"/"$name"
        echo -e "Certificate $DIR/$file renamed to $DIR/$name."
    done

    # Now generating the #pkcs12 (.p12) file
    read -p "Enter the cert directory location (e.g. /etc/letsencrypt/live/letsencrypt.libreswan.org): " LetsEncryptCertDir

    openssl pkcs12 -export -inkey "$LetsEncryptCertDir"/privkey.pem -in "$LetsEncryptCertDir"/fullchain.pem -CAfile "$DIR"/"$name" -out "$LetsEncryptCertDir"/generatedCertificate.p12

    # Importing the certificate in nss database
    echo -e "\nImporting the certificate in nss database."
    pk12util -d sql:/etc/ipsec.d -i "$LetsEncryptCertDir"/generatedCertificate.p12

    # Displaying the certificates installed in nss database
    echo -e "Displaying the certificates installed in nss database. \n"
    certutil -L -d sql:/etc/ipsec.d

    # Now generating the certbot configuration for reusing key
    echo -e "\nUpdating the letsencrypt configuration for reusing key. \n"
    read -p "Enter the config file name (e.g. /etc/letsencrypt/renewal/letsencrypt.libreswan.org.conf): " LetsEncryptConfFile
    echo "reuse_key = True" >>"$LetsEncryptConfFile"

    # To confirm the success try running the test connection script on the client
    echo -e "\nTo confirm the success try running the test connection script on the client"
}

# function for updating the issued certificates
update_certificate() {
    # Updating the certificate using Certbot keeping the private key same
    echo -e "Checking if Certbot is installed. \n"
    certBotInstalled=$(command -v certbot)
    if [ -z "$certBotInstalled" ]; then
        echo -e "Certbot not installed. \n"
        exit
    else
        echo -e "Certbot is installed, Good to go. \n"
    fi

    echo -e "Updating the certificate using Certbot keeping the private key same. \n"
    certbot renew --reuse-key

    # Did your certificate update?
    read -p "Did your certificate update? (yY/nN) " updateAnswer
    if [ "$updateAnswer" = "n" ] || [ "$updateAnswer" = "N" ]; then
        exit
    else
        # Importing the updated certificate in the nss database
        echo -e "Importing the updated certificate in the nss database"
        # Generating #pkcs12 file
        echo -e "Generating the #pkcs12 (.p12) file."
        echo -e "Downloading the required Intermediate certificate."

        # Downloading the required Intermediate certificate
        DIR=$(mktemp -d)
        CERT="https://letsencrypt.org/certs/letsencryptauthorityx3.pem.txt"

        wget_output=$(wget -q -P "$DIR" "$CERT")
        if [ $? -ne 0 ]; then
            echo "Certificates NOT Found OR Saving the certificate in directory failed"
            exit
        else
            echo -e "Intermediate Certificate downloaded in $DIR \n"
        fi

        # Renaming the certificates
        echo -e "Renaming the certificate."
        for file in "$DIR"/*; do
            file=${file##*/}
            # Removing the file extension (.txt) from certificates
            name=${file%.txt}
            mv "$DIR"/"$file" "$DIR"/"$name"
            echo -e "Certificate $DIR/$file renamed to $DIR/$name."
        done

        # Now generating the #pkcs12 (.p12) file
        read -p "Enter the cert directory location (e.g. /etc/letsencrypt/live/letsencrypt.libreswan.org): " LetsEncryptCertDir

        openssl pkcs12 -export -inkey "$LetsEncryptCertDir"/privkey.pem -in "$LetsEncryptCertDir"/fullchain.pem -CAfile "$DIR"/"$name" -out "$LetsEncryptCertDir"/generatedCertificate.p12

        # Importing the certificate in nss database
        echo -e "\nImporting the certificate in nss database."
        pk12util -d sql:/etc/ipsec.d -i "$LetsEncryptCertDir"/generatedCertificate.p12

        # Displaying the certificates installed in nss database
        echo -e "Displaying the certificates installed in nss database. \n"
        certutil -L -d sql:/etc/ipsec.d

        # To confirm the success try running the test connection script on the client
        echo -e "\nTo confirm the success try running the test connection script on the client"
    fi
}

case $1 in

"test")
    check_root
    test
    ;;
"setup")
    check_root
    setup
    ;;
"generatecertificate")
    check_root
    generate_certificate
    ;;
"updatecertificate")
    check_root
    update_certificate
    ;;
*)
    echo "Subcommand $1 not found"
    ;;
esac
