#! /bin/sh
#
# default letsencrypt script for OE utilities
#
# Copyright (C) 2019 Rishabh Rishabh <rishabh0402@gmail.com>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.  See <https://www.gnu.org/licenses/gpl2.txt>.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.

# CA certificates URL
CERT1="https://letsencrypt.org/certs/isrgrootx1.pem.txt"
CERT2="https://letsencrypt.org/certs/trustid-x3-root.pem.txt"

# Intermediate certificates URL
CERT3="https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem.txt"
CERT4="https://letsencrypt.org/certs/letsencryptauthorityx3.pem.txt"

# ipdir variable for getting location to save the configuration files
ipdir="@IPSEC_NSSDIR@"

# Installing for -server or -client
ServerClient=$1

# function for checking if the command is run as root
check_root() {
    # Checking if the command is run as root, This command needs to be run as root
    if [ ${EUID} -ne 0 ]; then
        echo "This command should be run as root."
        exit
    fi
}

# function for testing OE connection
test() {
    # Checking for any existing OE connections
    oeExisting=$(ipsec traffic | grep private)
    if [ ! -z "$oeExisting" ]; then
        echo "Existing OE Connections Found. Please stop the connections using 'ipsec restart' and try again."
        echo "$oeExisting"
        exit
    fi

    # Establishing an OE connection and sending pings to letsencrypt.libreswan.org server
    echo "Sending ping(IPv4) to letsencrypt.libreswan.org server."
    ping -4 -c 5 letsencrypt.libreswan.org &>/dev/null

    # Checking the success of establishing OE connection
    oeSuccess=$(ipsec traffic | grep private)
    if [ -z "$oeSuccess" ]; then
        echo "Failed to establish an OE connection. try 'ipsec restart' and test again using 'ipsec letsencrypt -t'."
        exit
    else
        echo "OE Connection established successfully."
        # Displaying connection status
        ipsec traffic | grep private
    fi
}

# Function for performaing Initial setup
setup() {
    # Installing for client or server?
    if [ "$ServerClient" = "-client" ]; then
        echo "Installing for Client."
    elif [ "$ServerClient" = "-server" ]; then
        echo "Installing for Server."
    else
        echo "Invalid [argument] $ServerClient . Try using 'ipsec letsencrypt -server' OR 'ipsec letsencrypt -client' OR 'ipsec letsencrypt -h'"
        exit
    fi

    # Downloading the letsencrypt certificates
    echo "Downloading the letsencrypt certificates"
    DIR1=$(mktemp -d)
    DIR2=$(mktemp -d)

    # Downloading the CA certificates
    wget_output=$(wget -q -P "$DIR1" "$CERT1" "$CERT2")
    if [ $? -ne 0 ]; then
        echo "CA Certificates NOT Found OR Saving the certificates in directory failed."
        exit
    fi

    # Downloading the Intermediate certificates
    wget_output=$(wget -q -P "$DIR2" "$CERT3" "$CERT4")
    if [ $? -ne 0 ]; then
        echo "Intermediate Certificates NOT Found OR Saving the certificates in directory failed."
        exit
    fi

    # Checking if nss database exists
    dbFileCount=$(ls "$ipdir"/*.db 2>/dev/null | wc -l)
    if [ $dbFileCount -eq 0 ]; then
        # NSS database does not exist. Initializing the nss database
        ipsec initnss
    fi

    # Importing the CA certificates in NSS database
    echo "Importing the downloaded certificates into the database"
    for file in "$DIR1"/*; do
        file=${file##*/}
        # Removing the file extension (.pem.txt) from certificates
        name=${file%.pem.txt}
        certutil -A -d sql:/etc/ipsec.d -n "$name" -i "$DIR1"/"$file" -t "CT,,"
    done

    # Importing the Intermediate certificates in NSS database
    for file in "$DIR2"/*; do
        file=${file##*/}
        # Removing the file extension (.pem.txt) from certificates
        name=${file%.pem.txt}
        certutil -A -d sql:/etc/ipsec.d -n "$name" -i "$DIR2"/"$file" -t "u,u,u"
    done

    # Copying the required configuration
    if [ "$ServerClient" = "-server" ]; then
        configFile="@FINALDOCDIR@/examples/oe-letsencrypt-server.conf"
        configFileName="oe-letsencrypt-server.conf"
    else
        configFile="@FINALDOCDIR@/examples/oe-letsencrypt-client.conf"
        configFileName="oe-letsencrypt-client.conf"
    fi

    echo "Saving the required configuration"
    cp "$configFile" "$ipdir"

    # restoring the security context of $ipdir/$configFileName using restorecon.
    checkRestorecon=$(which restorecon 2>/dev/null)
    if [ -n "${checkRestorecon}" -a -x "${checkRestorecon}" ]; then
        restorecon "$ipdir"/"$configFileName"
    fi
}

# function for generating a certificates
generate_certificate() {
    # Generating the certificate using Certbot
    certBotInstalled=$(command -v certbot)
    if [ -z "$certBotInstalled" ]; then
        echo "Certbot not installed. Please install Certbot and try again."
        exit
    fi

    # Generating the certificate using Certbot.
    sudo certbot certonly --webroot

    # Preparing the certificate for importing in the nss database, Generating #pkcs12 file, Downloading the required Intermediate certificate
    DIR=$(mktemp -d)

    wget_output=$(wget -q -P "$DIR" "$CERT4")
    if [ $? -ne 0 ]; then
        echo "Certificates NOT Found OR Saving the certificate in directory failed"
        exit
    fi

    # Renaming the certificates
    for file in "$DIR"/*; do
        file=${file##*/}
        # Removing the file extension (.txt) from certificates
        name=${file%.txt}
        mv "$DIR"/"$file" "$DIR"/"$name"
    done

    # Getting the host name eg. letsencrypt.libreswan.org
    read -p "Please enter the host name (e.g. letsencrypt.libreswan.org) : " HostName

    # Now generating the #pkcs12 (.p12) file
    LetsEncryptCertDir=/etc/letsencrypt/live/"$HostName"

    openssl pkcs12 -export -inkey "$LetsEncryptCertDir"/privkey.pem -in "$LetsEncryptCertDir"/fullchain.pem -CAfile "$DIR"/"$name" -out "$LetsEncryptCertDir"/generatedCertificate.p12

    # Importing the certificate in nss database
    echo "Importing the certificate in database."
    pk12util -d sql:/etc/ipsec.d -i "$LetsEncryptCertDir"/generatedCertificate.p12

    # Displaying the certificates installed in nss database
    certutil -L -d sql:/etc/ipsec.d

    # Now generating the certbot configuration for reusing key
    LetsEncryptConfFile=/etc/letsencrypt/renewal/"$HostName".conf
    echo "reuse_key = True" >>"$LetsEncryptConfFile"

    # To confirm the success try running the test connection script on the client
    echo "To confirm the success try running 'ipsec letsencrypt -t' on the client"
}

# function for updating the issued certificates
update_certificate() {
    # Updating the certificate using Certbot keeping the private key same
    certBotInstalled=$(command -v certbot)
    if [ -z "$certBotInstalled" ]; then
        echo "Certbot not installed."
        exit
    fi

    # Updating the certificate using Certbot keeping the private key same.
    certbot renew --reuse-key

    # Did your certificate update?
    read -p "Did your certificate update? (yY/nN) " updateAnswer
    if [ "$updateAnswer" = "n" ] || [ "$updateAnswer" = "N" ]; then
        exit
    else
        # Generating #pkcs12 file, Downloading the required Intermediate certificate
        DIR=$(mktemp -d)

        wget_output=$(wget -q -P "$DIR" "$CERT4")
        if [ $? -ne 0 ]; then
            echo "Certificates NOT Found OR Saving the certificate in directory failed"
            exit
        fi

        # Renaming the certificates
        for file in "$DIR"/*; do
            file=${file##*/}
            # Removing the file extension (.txt) from certificates
            name=${file%.txt}
            mv "$DIR"/"$file" "$DIR"/"$name"
        done

        # Getting the host name eg. letsencrypt.libreswan.org
        read -p "Please enter the host name (e.g. letsencrypt.libreswan.org) : " HostName

        # Now generating the #pkcs12 (.p12) file
        LetsEncryptCertDir=/etc/letsencrypt/live/"$HostName"

        openssl pkcs12 -export -inkey "$LetsEncryptCertDir"/privkey.pem -in "$LetsEncryptCertDir"/fullchain.pem -CAfile "$DIR"/"$name" -out "$LetsEncryptCertDir"/generatedCertificate.p12

        # Importing the certificate in nss database
        echo "Importing the certificate in the database."
        pk12util -d sql:/etc/ipsec.d -i "$LetsEncryptCertDir"/generatedCertificate.p12

        # Displaying the certificates installed in nss database
        echo "Displaying the certificates installed in the database."
        certutil -L -d sql:/etc/ipsec.d

        # To confirm the success try running the test connection script on the client
        echo "To confirm the success try running 'ipsec letsencrypt -t' on the client"
    fi
}

# function for showing help
help() {
    echo "Usage: ipsec letsencrypt [arguments]"
    echo "Available [arguments]"
    echo "-client, -server, test, generatecertificate, updatecertificate, help, -t, -gc, -uc, -h"
    echo
    echo "-client,-server :  For initial server/client setup."
    echo "usage: 'ipsec letsencrypt -client' OR 'ipsec letsencrypt -server'"
    echo
    echo "test, -t  -  For testing the configuration/connections."
    echo "usage: 'ipsec letsencrypt test' OR 'ipsec letsencrypt -t'"
    echo
    echo "generatecertificate, -gc  -  For generating the certificate."
    echo "usage: 'ipsec letsencrypt generatecertificate' OR 'ipsec letsencrypt -gc'"
    echo
    echo "updatecertificate, -uc  -  For updating the generated certificate (keeping the private key same)."
    echo "usage: 'ipsec letsencrypt updatecertificate' OR 'ipsec letsencrypt -uc'"
}

case $1 in

"test" | "-t")
    check_root
    test
    ;;
"-server" | "-client")
    check_root
    setup
    test
    ;;
"generatecertificate" | "-gc")
    check_root
    generate_certificate
    ;;
"updatecertificate" | "-uc")
    check_root
    update_certificate
    ;;
"help" | "-h")
    help
    ;;
*)
    echo "[argument] $1 not found"
    echo "try: 'ipsec letsencrypt -h' OR 'ipsec letsencrypt help' for help"
    ;;
esac
